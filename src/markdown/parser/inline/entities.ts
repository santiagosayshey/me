// HTML entities mapping
export const htmlEntities: Record<string, string> = {
  '&copy;': '©',
  '&trade;': '™',
  '&reg;': '®',
  '&lt;': '<',
  '&gt;': '>',
  '&amp;': '&',
  '&nbsp;': ' ',
  '&mdash;': '—',
  '&ndash;': '–',
  '&ldquo;': '"',
  '&rdquo;': '"',
  '&lsquo;': "'",
  '&rsquo;': "'",
  '&hellip;': '…',
  '&bull;': '•',
  '&middot;': '·',
  '&deg;': '°',
  '&plusmn;': '±',
  '&times;': '×',
  '&divide;': '÷',
  '&frac12;': '½',
  '&frac14;': '¼',
  '&frac34;': '¾',
  '&euro;': '€',
  '&pound;': '£',
  '&yen;': '¥',
  '&cent;': '¢',
  '&sect;': '§',
  '&para;': '¶',
  '&dagger;': '†',
  '&Dagger;': '‡',
  '&prime;': '′',
  '&Prime;': '″',
  '&infin;': '∞',
  '&sum;': '∑',
  '&minus;': '−',
  '&lowast;': '∗',
  '&radic;': '√',
  '&prop;': '∝',
  '&ne;': '≠',
  '&le;': '≤',
  '&ge;': '≥',
  '&asymp;': '≈',
  '&larr;': '←',
  '&uarr;': '↑',
  '&rarr;': '→',
  '&darr;': '↓',
  '&harr;': '↔',
  '&lArr;': '⇐',
  '&uArr;': '⇑',
  '&rArr;': '⇒',
  '&dArr;': '⇓',
  '&hArr;': '⇔'
};

// Common emoji shortcodes mapping
export const emojiShortcodes: Record<string, string> = {
  ':smile:': '😊',
  ':smiley:': '😃',
  ':grin:': '😁',
  ':laughing:': '😆',
  ':sweat_smile:': '😅',
  ':joy:': '😂',
  ':rofl:': '🤣',
  ':relaxed:': '☺️',
  ':blush:': '😊',
  ':innocent:': '😇',
  ':wink:': '😉',
  ':heart:': '❤️',
  ':hearts:': '♥️',
  ':heart_eyes:': '😍',
  ':kissing_heart:': '😘',
  ':thinking:': '🤔',
  ':neutral_face:': '😐',
  ':expressionless:': '😑',
  ':confused:': '😕',
  ':worried:': '😟',
  ':frowning:': '☹️',
  ':cry:': '😢',
  ':sob:': '😭',
  ':rage:': '😡',
  ':angry:': '😠',
  ':thumbsup:': '👍',
  ':thumbsdown:': '👎',
  ':ok_hand:': '👌',
  ':point_up:': '☝️',
  ':point_down:': '👇',
  ':point_left:': '👈',
  ':point_right:': '👉',
  ':raised_hands:': '🙌',
  ':pray:': '🙏',
  ':handshake:': '🤝',
  ':clap:': '👏',
  ':muscle:': '💪',
  ':star:': '⭐',
  ':star2:': '🌟',
  ':fire:': '🔥',
  ':boom:': '💥',
  ':rocket:': '🚀',
  ':airplane:': '✈️',
  ':car:': '🚗',
  ':bus:': '🚌',
  ':train:': '🚂',
  ':warning:': '⚠️',
  ':exclamation:': '❗',
  ':question:': '❓',
  ':white_check_mark:': '✅',
  ':x:': '❌',
  ':negative_squared_cross_mark:': '❎',
  ':heavy_check_mark:': '✔️',
  ':heavy_multiplication_x:': '✖️',
  ':bangbang:': '‼️',
  ':interrobang:': '⁉️',
  ':100:': '💯',
  ':heavy_plus_sign:': '➕',
  ':heavy_minus_sign:': '➖',
  ':heavy_division_sign:': '➗',
  ':bulb:': '💡',
  ':pushpin:': '📌',
  ':paperclip:': '📎',
  ':bookmark:': '🔖',
  ':link:': '🔗',
  ':email:': '✉️',
  ':envelope:': '✉️',
  ':package:': '📦',
  ':memo:': '📝',
  ':page_facing_up:': '📄',
  ':calendar:': '📅',
  ':clock:': '🕐',
  ':alarm_clock:': '⏰',
  ':stopwatch:': '⏱️',
  ':hourglass:': '⌛',
  ':mag:': '🔍',
  ':mag_right:': '🔎',
  ':lock:': '🔒',
  ':unlock:': '🔓',
  ':key:': '🔑',
  ':hammer:': '🔨',
  ':wrench:': '🔧',
  ':gear:': '⚙️',
  ':nut_and_bolt:': '🔩',
  ':computer:': '💻',
  ':desktop:': '🖥️',
  ':keyboard:': '⌨️',
  ':mouse:': '🖱️',
  ':phone:': '☎️',
  ':iphone:': '📱',
  ':calling:': '📲',
  ':tv:': '📺',
  ':camera:': '📷',
  ':video_camera:': '📹',
  ':microphone:': '🎤',
  ':speaker:': '🔈',
  ':sound:': '🔉',
  ':loud_sound:': '🔊',
  ':mute:': '🔇',
  ':bell:': '🔔',
  ':no_bell:': '🔕',
  ':mega:': '📣',
  ':loudspeaker:': '📢',
  ':eyes:': '👀',
  ':eye:': '👁️',
  ':ear:': '👂',
  ':nose:': '👃',
  ':tongue:': '👅',
  ':lips:': '👄',
  ':baby:': '👶',
  ':boy:': '👦',
  ':girl:': '👧',
  ':man:': '👨',
  ':woman:': '👩',
  ':wave:': '👋',
  ':information_source:': 'ℹ️',
  ':arrows_clockwise:': '🔃',
  ':arrows_counterclockwise:': '🔄',
  ':arrow_right:': '➡️',
  ':arrow_left:': '⬅️',
  ':arrow_up:': '⬆️',
  ':arrow_down:': '⬇️',
  ':zap:': '⚡',
  ':sunny:': '☀️',
  ':cloud:': '☁️',
  ':snowflake:': '❄️',
  ':umbrella:': '☂️',
  ':coffee:': '☕',
  ':pizza:': '🍕',
  ':hamburger:': '🍔',
  ':fries:': '🍟',
  ':beer:': '🍺',
  ':wine_glass:': '🍷',
  ':cocktail:': '🍹',
  ':tropical_drink:': '🍹',
  ':birthday:': '🎂',
  ':cake:': '🍰',
  ':tada:': '🎉',
  ':confetti_ball:': '🎊',
  ':trophy:': '🏆',
  ':medal:': '🏅',
  ':soccer:': '⚽',
  ':basketball:': '🏀',
  ':football:': '🏈',
  ':baseball:': '⚾',
  ':tennis:': '🎾',
  ':golf:': '⛳',
  ':checkered_flag:': '🏁',
  ':mountain:': '⛰️',
  ':beach:': '🏖️',
  ':house:': '🏠',
  ':office:': '🏢',
  ':school:': '🏫',
  ':hospital:': '🏥',
  ':bank:': '🏦',
  ':atm:': '🏧',
  ':hotel:': '🏨',
  ':earth_americas:': '🌎',
  ':earth_africa:': '🌍',
  ':earth_asia:': '🌏',
  ':globe:': '🌐',
  ':moon:': '🌙',
  ':sun:': '☀️',
  ':dizzy:': '💫',
  ':sparkles:': '✨',
  ':rainbow:': '🌈',
  ':ocean:': '🌊',
  ':bamboo:': '🎋',
  ':gift_heart:': '💝',
  ':dolls:': '🎎',
  ':school_satchel:': '🎒',
  ':mortar_board:': '🎓',
  ':flags:': '🎏',
  ':fireworks:': '🎆',
  ':sparkler:': '🎇',
  ':wind_chime:': '🎐',
  ':jack_o_lantern:': '🎃',
  ':ghost:': '👻',
  ':santa:': '🎅',
  ':christmas_tree:': '🎄',
  ':gift:': '🎁',
  ':tanabata_tree:': '🎋',
  ':no_entry:': '⛔',
  ':no_entry_sign:': '🚫',
  ':no_bicycles:': '🚳',
  ':no_smoking:': '🚭',
  ':no_littering:': '🚯',
  ':do_not_litter:': '🚯',
  ':no_pedestrians:': '🚷',
  ':no_mobile_phones:': '📵',
  ':underage:': '🔞',
  ':accept:': '🉑',
  ':ideograph_advantage:': '🉐',
  ':white_flower:': '💮',
  ':secret:': '㊙️',
  ':congratulations:': '㊗️',
  ':u5408:': '🈴',
  ':u6e80:': '🈵',
  ':u7981:': '🈲',
  ':u6709:': '🈶',
  ':u7121:': '🈚',
  ':u7533:': '🈸',
  ':u55b6:': '🈺',
  ':u6708:': '🈷️',
  ':eight_pointed_black_star:': '✴️',
  ':vs:': '🆚',
  ':white_circle:': '⚪',
  ':black_circle:': '⚫',
  ':red_circle:': '🔴',
  ':blue_circle:': '🔵',
  ':green_circle:': '🟢',
  ':yellow_circle:': '🟡',
  ':purple_circle:': '🟣',
  ':brown_circle:': '🟤'
};

// Process text to replace HTML entities
export function processHtmlEntities(text: string): string {
  let result = text;
  
  // Replace named entities
  Object.entries(htmlEntities).forEach(([entity, char]) => {
    result = result.replace(new RegExp(entity.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), char);
  });
  
  // Replace numeric entities (&#123; or &#x7B;)
  result = result.replace(/&#(\d+);/g, (match, code) => {
    return String.fromCharCode(parseInt(code, 10));
  });
  
  result = result.replace(/&#x([0-9a-fA-F]+);/g, (match, code) => {
    return String.fromCharCode(parseInt(code, 16));
  });
  
  return result;
}

// Process text to replace emoji shortcodes
export function processEmojiShortcodes(text: string): string {
  let result = text;
  
  // Sort by length to avoid partial replacements
  const sortedCodes = Object.keys(emojiShortcodes).sort((a, b) => b.length - a.length);
  
  sortedCodes.forEach(code => {
    const emoji = emojiShortcodes[code];
    // Use word boundaries to avoid replacing within words
    const regex = new RegExp(code.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
    result = result.replace(regex, emoji);
  });
  
  return result;
}

// Process both entities and emojis
export function processSpecialCharacters(text: string): string {
  let result = processHtmlEntities(text);
  result = processEmojiShortcodes(result);
  return result;
}